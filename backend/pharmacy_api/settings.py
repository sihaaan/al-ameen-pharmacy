"""
Django settings for pharmacy_api project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import re
import dj_database_url
from dotenv import load_dotenv
import cloudinary

# ---- load env file ----
load_dotenv()  # reads .env at project root

BASE_DIR = Path(__file__).resolve().parent.parent

# ---- security & debug from env ----
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "dev-only")
DEBUG = bool(int(os.environ.get("DEBUG", "1")))
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# ---- installed apps ----
INSTALLED_APPS = [
    'django.contrib.admin','django.contrib.auth','django.contrib.contenttypes',
    'django.contrib.sessions','django.contrib.messages','django.contrib.staticfiles',
    'rest_framework','corsheaders',
    'cloudinary_storage',  # Must be before django.contrib.staticfiles
    'cloudinary',
    'api'
]

# ---- middleware (CORS FIRST) ----
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serve static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration
# For development, allow localhost. For production, set CORS_ALLOWED_ORIGINS in .env
CORS_ALLOWED_ORIGINS = os.environ.get(
    'CORS_ALLOWED_ORIGINS',
    'http://localhost:3000,http://127.0.0.1:3000'  # Development default
).split(',')

CORS_ALLOW_CREDENTIALS = True
ROOT_URLCONF = 'pharmacy_api.urls'

# ---- templates ----
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pharmacy_api.wsgi.application'

# ---- database configuration ----
# PostgreSQL via Neon (cloud database)
# Good for: production, learning real-world setup
DATABASES = {
    "default": dj_database_url.parse(
        os.environ.get("DATABASE_URL"),
        conn_max_age=600
    )
}

# For local development with SQLite (simpler but less realistic):
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# ---- timezone ----
TIME_ZONE = "Asia/Dubai"
USE_TZ = True

# ---- static files (production ready with Whitenoise) ----
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Where collectstatic puts files

# ---- Cloudinary Configuration (Cloud Image Storage) ----
# Images will be stored on Cloudinary CDN instead of local filesystem

# Parse and configure Cloudinary from CLOUDINARY_URL environment variable
cloudinary_url = os.environ.get('CLOUDINARY_URL', '')
if cloudinary_url:
    # Extract credentials from CLOUDINARY_URL format: cloudinary://api_key:api_secret@cloud_name
    match = re.match(r'cloudinary://(\d+):([^@]+)@(.+)', cloudinary_url)
    if match:
        api_key, api_secret, cloud_name = match.groups()
        cloudinary.config(
            cloud_name=cloud_name,
            api_key=api_key,
            api_secret=api_secret,
            secure=True
        )

CLOUDINARY_STORAGE = {
    'CLOUDINARY_URL': cloudinary_url,
}

# Media files URL
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Django 5.x STORAGES configuration
# Configure both static files and media files storage
if cloudinary_url:
    # Production: Use Cloudinary for media files, Whitenoise for static files
    STORAGES = {
        "default": {
            "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }
else:
    # Development: Use local filesystem for both
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

# ---- Stripe Configuration ----
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')

# ---- Email Configuration ----
# For development: File backend (saves emails to files, avoids Unicode issues)
# For production: Use SMTP backend with real email service

EMAIL_BACKEND = os.environ.get(
    'EMAIL_BACKEND',
    'django.core.mail.backends.filebased.EmailBackend'  # Development default
)

# File-based email settings (for development)
EMAIL_FILE_PATH = BASE_DIR / 'sent_emails'  # Emails will be saved here

# SMTP Configuration (for production)
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = bool(int(os.environ.get('EMAIL_USE_TLS', '1')))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@alameenpharmacy.com')

# To use Gmail SMTP in production, add to .env:
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=1
# EMAIL_HOST_USER=your-email@gmail.com
# EMAIL_HOST_PASSWORD=your-app-password
# DEFAULT_FROM_EMAIL=AL AMEEN PHARMACY <noreply@alameenpharmacy.com>


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---- security settings (HTTPS enforcement for production) ----
# These settings are only active when DEBUG=False (production)
if not DEBUG:
    SECURE_SSL_REDIRECT = True  # Force HTTPS
    SECURE_HSTS_SECONDS = 31536000  # Remember HTTPS for 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply to all subdomains
    SECURE_HSTS_PRELOAD = True  # Allow browser preload list
    SESSION_COOKIE_SECURE = True  # Only send session cookies over HTTPS
    CSRF_COOKIE_SECURE = True  # Only send CSRF cookies over HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # For reverse proxy

# ---- rest framework ----
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # read Bearer tokens
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",  # start open; weâ€™ll lock views we need
    ),
}
